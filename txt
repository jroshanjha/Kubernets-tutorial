To deploy a Flask application and FastAPI-based ML model service using Kubernetes, you can create a microservices architecture where:

Flask app serves as the frontend/UI or main application logic.

FastAPI service serves as a backend ML API (model prediction, analytics, etc.).

Kubernetes (K8s) handles container orchestration, load balancing, scaling, and deployment.

# ‚úÖ Architecture Overview

[User/Browser]
     |
     v
[Flask Frontend App] <-------> [FastAPI ML Microservice]
     |                                |
     v                                v
[Kubernetes Deployment & Services: Flask + FastAPI + Optional DB (MySQL/Postgres)]


# üöÄ Deployment Commands

# Step 1: Build and push images
docker build -t your-dockerhub-username/flask-app:latest ./flask-app
docker push your-dockerhub-username/flask-app:latest

docker build -t your-dockerhub-username/fastapi-ml:latest ./fastapi-ml
docker push your-dockerhub-username/fastapi-ml:latest

# Step 2: Apply Kubernetes configs
kubectl apply -f k8s/flask-deployment.yaml
kubectl apply -f k8s/fastapi-deployment.yaml


# ‚úÖ Optional Add-ons
Add ingress controller (like NGINX) for external URL routing.

Add Horizontal Pod Autoscaler for scaling.

Use ConfigMaps or Secrets for environment variables.

Add PostgreSQL or MySQL DB deployment if needed.


# ‚òÅÔ∏è Choose one:
AWS (EKS - Elastic Kubernetes Service)

GCP (GKE - Google Kubernetes Engine)

Azure (AKS - Azure Kubernetes Service)

# üîß Step-by-Step K8s Deployment: AWS, GCP, Azure

# üî∏ 1. Kubernetes Cluster Creation
# Install eksctl: https://docs.aws.amazon.com/eks/latest/userguide/eksctl.html

eksctl create cluster \
  --name ml-cluster \
  --region us-east-1 \
  --nodes 2 \
  --node-type t3.medium \
  --with-oidc \
  --managed

# ‚úÖ GCP (GKE)
# Authenticate
gcloud auth login
gcloud config set project YOUR_PROJECT_ID

# Create GKE cluster
gcloud container clusters create ml-cluster \
  --zone us-central1-a \
  --num-nodes=2

# Get credentials
gcloud container clusters get-credentials ml-cluster --zone us-central1-a

# ‚úÖ Azure (AKS)
# Login to Azure
az login

# Create Resource Group
az group create --name ml-resource-group --location eastus

# Create AKS Cluster
az aks create \
  --resource-group ml-resource-group \
  --name ml-cluster \
  --node-count 2 \
  --enable-addons monitoring \
  --generate-ssh-keys

# Get credentials
az aks get-credentials --resource-group ml-resource-group --name ml-cluster

# üî∏. Deploy App to Kubernetes

# Switch to your project directory
kubectl apply -f k8s/fastapi-deployment.yaml
kubectl apply -f k8s/flask-deployment.yaml

kubectl get all

# üî∏ 3. Expose Flask with LoadBalancer
All 3 providers support type: LoadBalancer. Your YAML already does this:
type: LoadBalancer

kubectl get service flask-service

# ‚û°Ô∏è Wait for EXTERNAL-IP to appear (public IP).

# Build + Push Docker Images (CI/CD or Manual)
# Replace with your DockerHub username
docker build -t yourname/flask-app ./flask-app
docker build -t yourname/fastapi-ml ./fastapi-ml

docker push yourname/flask-app
docker push yourname/fastapi-ml

